# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on: [push, pull_request]

jobs:
  build:
    name: Lint, Test & Build
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Merge requirements.txt files
      run: |
        find . -name 'requirements.txt' -exec cat {} \; | sort | uniq > requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest build twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

    - name: Run tests with pytest
      run: |
        pytest

    - name: Build packages
      run: |
        cd generics && python -m build && cd ..
        cd pipeline && python -m build && cd ..

    - name: Upload ixp-generic artifacts
      uses: actions/upload-artifact@v4
      with:
        name: generyx-${{ matrix.python-version }}
        path: |
          generics/dist/

    - name: Upload pypeline artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pypeline-${{ matrix.python-version }}
        path: |
          pipeline/dist/

  release:
    name: Sign, Publish & Release
    if: startsWith(github.ref, 'refs/tags/v')  # only publish to PyPI on tag pushes that start with 'v'
    runs-on: ubuntu-24.04
    needs: build
    permissions:
      id-token: write
      contents: write
    env:
      name: pypi
      python-version-to-publish: "3.12"
      url: https://test.pypi.org/p/pypeline
      pypi-publish-url: https://test.pypi.org/legacy/
    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Build packages
      run: |
        ls -l
        ls -l dist/

    - name: Publish generyx ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: ${{ env.pypi-publish-url }}
        packages-dir: dist/generyx-${{ env.python-version-to-publish }}
        skip-existing: true

    - name: Publish pypeline ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: ${{ env.pypi-publish-url }}
        packages-dir: dist/pypeline-${{ env.python-version-to-publish }}
        skip-existing: true

    - name: Sign with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/generyx-${{ env.python-version-to-publish }}/*.tar.gz
          ./dist/generyx-${{ env.python-version-to-publish }}/*.whl
          ./dist/pypeline-${{ env.python-version-to-publish }}/*.tar.gz
          ./dist/pypeline-${{ env.python-version-to-publish }}/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""

    - name: Upload release artifacts
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/generyx-${{ env.python-version-to-publish }}/** dist/pypeline-${{ env.python-version-to-publish }}/**
        --repo "$GITHUB_REPOSITORY"
